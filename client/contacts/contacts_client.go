// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateContact creates a contact
*/
func (a *Client) CreateContact(params *CreateContactParams, authInfo runtime.ClientAuthInfoWriter) (*CreateContactCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createContact",
		Method:             "POST",
		PathPattern:        "/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateContactCreated), nil

}

/*
GetContactInfo retrieves contact informations
*/
func (a *Client) GetContactInfo(params *GetContactInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContactInfo",
		Method:             "GET",
		PathPattern:        "/contacts/{email}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContactInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContactInfoOK), nil

}

/*
GetContactStats gets the campaigns statistics for a contact
*/
func (a *Client) GetContactStats(params *GetContactStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContactStats",
		Method:             "GET",
		PathPattern:        "/contacts/{email}/campaignStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContactStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContactStatsOK), nil

}

/*
GetContacts gets all the contacts
*/
func (a *Client) GetContacts(params *GetContactsParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContacts",
		Method:             "GET",
		PathPattern:        "/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContactsOK), nil

}

/*
ImportContacts imports contacts

It returns the background process ID which on completion calls the notify URL that you have set in the input.
*/
func (a *Client) ImportContacts(params *ImportContactsParams, authInfo runtime.ClientAuthInfoWriter) (*ImportContactsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importContacts",
		Method:             "POST",
		PathPattern:        "/contacts/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportContactsAccepted), nil

}

/*
RequestContactExport exports contacts

It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
*/
func (a *Client) RequestContactExport(params *RequestContactExportParams, authInfo runtime.ClientAuthInfoWriter) (*RequestContactExportAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestContactExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestContactExport",
		Method:             "POST",
		PathPattern:        "/contacts/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestContactExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RequestContactExportAccepted), nil

}

/*
UpdateContact updates a contact
*/
func (a *Client) UpdateContact(params *UpdateContactParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateContactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateContact",
		Method:             "PUT",
		PathPattern:        "/contacts/{email}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateContactNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
