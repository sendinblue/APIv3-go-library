// Code generated by go-swagger; DO NOT EDIT.

package senders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sendinblue/APIv3-go-library/models"
)

// GetSendersReader is a Reader for the GetSenders structure.
type GetSendersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSendersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSendersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSendersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSendersOK creates a GetSendersOK with default headers values
func NewGetSendersOK() *GetSendersOK {
	return &GetSendersOK{}
}

/*GetSendersOK handles this case with default header values.

list of senders
*/
type GetSendersOK struct {
	Payload *models.GetSendersList
}

func (o *GetSendersOK) Error() string {
	return fmt.Sprintf("[GET /senders][%d] getSendersOK  %+v", 200, o.Payload)
}

func (o *GetSendersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetSendersList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSendersBadRequest creates a GetSendersBadRequest with default headers values
func NewGetSendersBadRequest() *GetSendersBadRequest {
	return &GetSendersBadRequest{}
}

/*GetSendersBadRequest handles this case with default header values.

bad request
*/
type GetSendersBadRequest struct {
	Payload *models.ErrorModel
}

func (o *GetSendersBadRequest) Error() string {
	return fmt.Sprintf("[GET /senders][%d] getSendersBadRequest  %+v", 400, o.Payload)
}

func (o *GetSendersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
