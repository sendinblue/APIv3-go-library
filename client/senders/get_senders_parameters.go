// Code generated by go-swagger; DO NOT EDIT.

package senders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSendersParams creates a new GetSendersParams object
// with the default values initialized.
func NewGetSendersParams() *GetSendersParams {
	var ()
	return &GetSendersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSendersParamsWithTimeout creates a new GetSendersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSendersParamsWithTimeout(timeout time.Duration) *GetSendersParams {
	var ()
	return &GetSendersParams{

		timeout: timeout,
	}
}

// NewGetSendersParamsWithContext creates a new GetSendersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSendersParamsWithContext(ctx context.Context) *GetSendersParams {
	var ()
	return &GetSendersParams{

		Context: ctx,
	}
}

// NewGetSendersParamsWithHTTPClient creates a new GetSendersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSendersParamsWithHTTPClient(client *http.Client) *GetSendersParams {
	var ()
	return &GetSendersParams{
		HTTPClient: client,
	}
}

/*GetSendersParams contains all the parameters to send to the API endpoint
for the get senders operation typically these are written to a http.Request
*/
type GetSendersParams struct {

	/*Domain
	  Filter your senders for a specific domain

	*/
	Domain *string
	/*IP
	  Filter your senders for a specific ip (available for dedicated IP usage only)

	*/
	IP *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get senders params
func (o *GetSendersParams) WithTimeout(timeout time.Duration) *GetSendersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get senders params
func (o *GetSendersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get senders params
func (o *GetSendersParams) WithContext(ctx context.Context) *GetSendersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get senders params
func (o *GetSendersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get senders params
func (o *GetSendersParams) WithHTTPClient(client *http.Client) *GetSendersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get senders params
func (o *GetSendersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the get senders params
func (o *GetSendersParams) WithDomain(domain *string) *GetSendersParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the get senders params
func (o *GetSendersParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithIP adds the ip to the get senders params
func (o *GetSendersParams) WithIP(ip *string) *GetSendersParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the get senders params
func (o *GetSendersParams) SetIP(ip *string) {
	o.IP = ip
}

// WriteToRequest writes these params to a swagger request
func (o *GetSendersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Domain != nil {

		// query param domain
		var qrDomain string
		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {
			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}

	}

	if o.IP != nil {

		// query param ip
		var qrIP string
		if o.IP != nil {
			qrIP = *o.IP
		}
		qIP := qrIP
		if qIP != "" {
			if err := r.SetQueryParam("ip", qIP); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
