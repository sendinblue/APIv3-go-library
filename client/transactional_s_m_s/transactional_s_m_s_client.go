// Code generated by go-swagger; DO NOT EDIT.

package transactional_s_m_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new transactional s m s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transactional s m s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSmsEvents gets all the s m s activity unaggregated events
*/
func (a *Client) GetSmsEvents(params *GetSmsEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmsEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmsEvents",
		Method:             "GET",
		PathPattern:        "/transactionalSMS/statistics/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmsEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmsEventsOK), nil

}

/*
GetTransacAggregatedSmsReport gets your s m s activity aggregated over a period of time
*/
func (a *Client) GetTransacAggregatedSmsReport(params *GetTransacAggregatedSmsReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetTransacAggregatedSmsReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransacAggregatedSmsReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTransacAggregatedSmsReport",
		Method:             "GET",
		PathPattern:        "/transactionalSMS/statistics/aggregatedReport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransacAggregatedSmsReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransacAggregatedSmsReportOK), nil

}

/*
GetTransacSmsReport gets your s m s activity aggregated per day
*/
func (a *Client) GetTransacSmsReport(params *GetTransacSmsReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetTransacSmsReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransacSmsReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTransacSmsReport",
		Method:             "GET",
		PathPattern:        "/transactionalSMS/statistics/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransacSmsReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransacSmsReportOK), nil

}

/*
SendTransacSms sends the s m s campaign to the specified mobile number
*/
func (a *Client) SendTransacSms(params *SendTransacSmsParams, authInfo runtime.ClientAuthInfoWriter) (*SendTransacSmsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTransacSmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTransacSms",
		Method:             "POST",
		PathPattern:        "/transactionalSMS/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendTransacSmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendTransacSmsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
