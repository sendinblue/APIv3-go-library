// Code generated by go-swagger; DO NOT EDIT.

package transactional_s_m_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sendinblue/APIv3-go-library/models"
)

// GetSmsEventsReader is a Reader for the GetSmsEvents structure.
type GetSmsEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSmsEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSmsEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSmsEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSmsEventsOK creates a GetSmsEventsOK with default headers values
func NewGetSmsEventsOK() *GetSmsEventsOK {
	return &GetSmsEventsOK{}
}

/*GetSmsEventsOK handles this case with default header values.

Sms events report informations
*/
type GetSmsEventsOK struct {
	Payload *models.GetSmsEventReport
}

func (o *GetSmsEventsOK) Error() string {
	return fmt.Sprintf("[GET /transactionalSMS/statistics/events][%d] getSmsEventsOK  %+v", 200, o.Payload)
}

func (o *GetSmsEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetSmsEventReport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmsEventsBadRequest creates a GetSmsEventsBadRequest with default headers values
func NewGetSmsEventsBadRequest() *GetSmsEventsBadRequest {
	return &GetSmsEventsBadRequest{}
}

/*GetSmsEventsBadRequest handles this case with default header values.

bad request
*/
type GetSmsEventsBadRequest struct {
	Payload *models.ErrorModel
}

func (o *GetSmsEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /transactionalSMS/statistics/events][%d] getSmsEventsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSmsEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
