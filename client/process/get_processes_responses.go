// Code generated by go-swagger; DO NOT EDIT.

package process

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sendinblue/APIv3-go-library/models"
)

// GetProcessesReader is a Reader for the GetProcesses structure.
type GetProcessesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProcessesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetProcessesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetProcessesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetProcessesOK creates a GetProcessesOK with default headers values
func NewGetProcessesOK() *GetProcessesOK {
	return &GetProcessesOK{}
}

/*GetProcessesOK handles this case with default header values.

processes informations
*/
type GetProcessesOK struct {
	Payload *models.GetProcesses
}

func (o *GetProcessesOK) Error() string {
	return fmt.Sprintf("[GET /processes][%d] getProcessesOK  %+v", 200, o.Payload)
}

func (o *GetProcessesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetProcesses)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProcessesBadRequest creates a GetProcessesBadRequest with default headers values
func NewGetProcessesBadRequest() *GetProcessesBadRequest {
	return &GetProcessesBadRequest{}
}

/*GetProcessesBadRequest handles this case with default header values.

bad request
*/
type GetProcessesBadRequest struct {
	Payload *models.ErrorModel
}

func (o *GetProcessesBadRequest) Error() string {
	return fmt.Sprintf("[GET /processes][%d] getProcessesBadRequest  %+v", 400, o.Payload)
}

func (o *GetProcessesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
