// Code generated by go-swagger; DO NOT EDIT.

package reseller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sendinblue/APIv3-go-library/models"
)

// NewRemoveCreditsParams creates a new RemoveCreditsParams object
// with the default values initialized.
func NewRemoveCreditsParams() *RemoveCreditsParams {
	var ()
	return &RemoveCreditsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveCreditsParamsWithTimeout creates a new RemoveCreditsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveCreditsParamsWithTimeout(timeout time.Duration) *RemoveCreditsParams {
	var ()
	return &RemoveCreditsParams{

		timeout: timeout,
	}
}

// NewRemoveCreditsParamsWithContext creates a new RemoveCreditsParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveCreditsParamsWithContext(ctx context.Context) *RemoveCreditsParams {
	var ()
	return &RemoveCreditsParams{

		Context: ctx,
	}
}

// NewRemoveCreditsParamsWithHTTPClient creates a new RemoveCreditsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveCreditsParamsWithHTTPClient(client *http.Client) *RemoveCreditsParams {
	var ()
	return &RemoveCreditsParams{
		HTTPClient: client,
	}
}

/*RemoveCreditsParams contains all the parameters to send to the API endpoint
for the remove credits operation typically these are written to a http.Request
*/
type RemoveCreditsParams struct {

	/*ChildID
	  id of reseller's child

	*/
	ChildID int64
	/*RemoveCredits
	  Values to post to remove email or SMS credits from a specific child account

	*/
	RemoveCredits *models.RemoveCredits

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove credits params
func (o *RemoveCreditsParams) WithTimeout(timeout time.Duration) *RemoveCreditsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove credits params
func (o *RemoveCreditsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove credits params
func (o *RemoveCreditsParams) WithContext(ctx context.Context) *RemoveCreditsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove credits params
func (o *RemoveCreditsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove credits params
func (o *RemoveCreditsParams) WithHTTPClient(client *http.Client) *RemoveCreditsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove credits params
func (o *RemoveCreditsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChildID adds the childID to the remove credits params
func (o *RemoveCreditsParams) WithChildID(childID int64) *RemoveCreditsParams {
	o.SetChildID(childID)
	return o
}

// SetChildID adds the childId to the remove credits params
func (o *RemoveCreditsParams) SetChildID(childID int64) {
	o.ChildID = childID
}

// WithRemoveCredits adds the removeCredits to the remove credits params
func (o *RemoveCreditsParams) WithRemoveCredits(removeCredits *models.RemoveCredits) *RemoveCreditsParams {
	o.SetRemoveCredits(removeCredits)
	return o
}

// SetRemoveCredits adds the removeCredits to the remove credits params
func (o *RemoveCreditsParams) SetRemoveCredits(removeCredits *models.RemoveCredits) {
	o.RemoveCredits = removeCredits
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveCreditsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param childId
	if err := r.SetPathParam("childId", swag.FormatInt64(o.ChildID)); err != nil {
		return err
	}

	if o.RemoveCredits != nil {
		if err := r.SetBodyParam(o.RemoveCredits); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
