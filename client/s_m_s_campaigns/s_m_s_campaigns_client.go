// Code generated by go-swagger; DO NOT EDIT.

package s_m_s_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new s m s campaigns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s m s campaigns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSMSCampaign creates a s m s campaign
*/
func (a *Client) CreateSMSCampaign(params *CreateSMSCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSMSCampaignCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSMSCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSMSCampaign",
		Method:             "POST",
		PathPattern:        "/smsCampaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSMSCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSMSCampaignCreated), nil

}

/*
DeleteSMSCampaigns deletes the s m s campaign
*/
func (a *Client) DeleteSMSCampaigns(params *DeleteSMSCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSMSCampaignsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSMSCampaignsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSMSCampaigns",
		Method:             "DELETE",
		PathPattern:        "/smsCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSMSCampaignsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSMSCampaignsNoContent), nil

}

/*
GetSMSCampaigns returns the informations for all your created s m s campaigns
*/
func (a *Client) GetSMSCampaigns(params *GetSMSCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSMSCampaignsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSMSCampaignsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSMSCampaigns",
		Method:             "GET",
		PathPattern:        "/smsCampaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSMSCampaignsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSMSCampaignsOK), nil

}

/*
GetSmsCampaign gets a s m s campaign
*/
func (a *Client) GetSmsCampaign(params *GetSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsCampaignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmsCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmsCampaign",
		Method:             "GET",
		PathPattern:        "/smsCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmsCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmsCampaignOK), nil

}

/*
RequestSMSRecipientExport exports the recipients of the specified campaign

It returns the background process ID which on completion calls the notify URL that you have set in the input.
*/
func (a *Client) RequestSMSRecipientExport(params *RequestSMSRecipientExportParams, authInfo runtime.ClientAuthInfoWriter) (*RequestSMSRecipientExportAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestSMSRecipientExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestSMSRecipientExport",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/exportRecipients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestSMSRecipientExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RequestSMSRecipientExportAccepted), nil

}

/*
SendSMSCampaignNow sends your s m s campaign immediately
*/
func (a *Client) SendSMSCampaignNow(params *SendSMSCampaignNowParams, authInfo runtime.ClientAuthInfoWriter) (*SendSMSCampaignNowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendSMSCampaignNowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendSMSCampaignNow",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/sendNow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendSMSCampaignNowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendSMSCampaignNowNoContent), nil

}

/*
SendSMSReport sends report of s m s campaigns

Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
*/
func (a *Client) SendSMSReport(params *SendSMSReportParams, authInfo runtime.ClientAuthInfoWriter) (*SendSMSReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendSMSReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendSMSReport",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/sendReport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendSMSReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendSMSReportNoContent), nil

}

/*
SendTestSms sends an s m s
*/
func (a *Client) SendTestSms(params *SendTestSmsParams, authInfo runtime.ClientAuthInfoWriter) (*SendTestSmsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTestSmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTestSms",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/sendTest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendTestSmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendTestSmsNoContent), nil

}

/*
UpdateSMSCampaignStatus updates the campaign status
*/
func (a *Client) UpdateSMSCampaignStatus(params *UpdateSMSCampaignStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSMSCampaignStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSMSCampaignStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSMSCampaignStatus",
		Method:             "PUT",
		PathPattern:        "/smsCampaigns/{campaignId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSMSCampaignStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSMSCampaignStatusNoContent), nil

}

/*
UpdateSmsCampaign updates a s m s campaign
*/
func (a *Client) UpdateSmsCampaign(params *UpdateSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmsCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmsCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmsCampaign",
		Method:             "PUT",
		PathPattern:        "/smsCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSmsCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSmsCampaignNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
