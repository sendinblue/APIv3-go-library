// Code generated by go-swagger; DO NOT EDIT.

package sms_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sendinblue/APIv3-go-library/models"
)

// RequestSMSRecipientExportReader is a Reader for the RequestSMSRecipientExport structure.
type RequestSMSRecipientExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestSMSRecipientExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewRequestSMSRecipientExportAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRequestSMSRecipientExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRequestSMSRecipientExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRequestSMSRecipientExportAccepted creates a RequestSMSRecipientExportAccepted with default headers values
func NewRequestSMSRecipientExportAccepted() *RequestSMSRecipientExportAccepted {
	return &RequestSMSRecipientExportAccepted{}
}

/*RequestSMSRecipientExportAccepted handles this case with default header values.

Recipient export request has been accepted
*/
type RequestSMSRecipientExportAccepted struct {
	Payload *models.CreatedProcessID
}

func (o *RequestSMSRecipientExportAccepted) Error() string {
	return fmt.Sprintf("[POST /smsCampaigns/{campaignId}/exportRecipients][%d] requestSMSRecipientExportAccepted  %+v", 202, o.Payload)
}

func (o *RequestSMSRecipientExportAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreatedProcessID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestSMSRecipientExportBadRequest creates a RequestSMSRecipientExportBadRequest with default headers values
func NewRequestSMSRecipientExportBadRequest() *RequestSMSRecipientExportBadRequest {
	return &RequestSMSRecipientExportBadRequest{}
}

/*RequestSMSRecipientExportBadRequest handles this case with default header values.

bad request
*/
type RequestSMSRecipientExportBadRequest struct {
	Payload *models.ErrorModel
}

func (o *RequestSMSRecipientExportBadRequest) Error() string {
	return fmt.Sprintf("[POST /smsCampaigns/{campaignId}/exportRecipients][%d] requestSMSRecipientExportBadRequest  %+v", 400, o.Payload)
}

func (o *RequestSMSRecipientExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestSMSRecipientExportNotFound creates a RequestSMSRecipientExportNotFound with default headers values
func NewRequestSMSRecipientExportNotFound() *RequestSMSRecipientExportNotFound {
	return &RequestSMSRecipientExportNotFound{}
}

/*RequestSMSRecipientExportNotFound handles this case with default header values.

Campaign ID not found
*/
type RequestSMSRecipientExportNotFound struct {
	Payload *models.ErrorModel
}

func (o *RequestSMSRecipientExportNotFound) Error() string {
	return fmt.Sprintf("[POST /smsCampaigns/{campaignId}/exportRecipients][%d] requestSMSRecipientExportNotFound  %+v", 404, o.Payload)
}

func (o *RequestSMSRecipientExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
