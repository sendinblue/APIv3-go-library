// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sendinblue/APIv3-go-library/models"
)

// NewUpdateFolderParams creates a new UpdateFolderParams object
// with the default values initialized.
func NewUpdateFolderParams() *UpdateFolderParams {
	var ()
	return &UpdateFolderParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateFolderParamsWithTimeout creates a new UpdateFolderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateFolderParamsWithTimeout(timeout time.Duration) *UpdateFolderParams {
	var ()
	return &UpdateFolderParams{

		timeout: timeout,
	}
}

// NewUpdateFolderParamsWithContext creates a new UpdateFolderParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateFolderParamsWithContext(ctx context.Context) *UpdateFolderParams {
	var ()
	return &UpdateFolderParams{

		Context: ctx,
	}
}

// NewUpdateFolderParamsWithHTTPClient creates a new UpdateFolderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateFolderParamsWithHTTPClient(client *http.Client) *UpdateFolderParams {
	var ()
	return &UpdateFolderParams{
		HTTPClient: client,
	}
}

/*UpdateFolderParams contains all the parameters to send to the API endpoint
for the update folder operation typically these are written to a http.Request
*/
type UpdateFolderParams struct {

	/*FolderID
	  Id of the folder

	*/
	FolderID int64
	/*UpdateFolder
	  Name of the folder

	*/
	UpdateFolder *models.CreateUpdateFolder

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update folder params
func (o *UpdateFolderParams) WithTimeout(timeout time.Duration) *UpdateFolderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update folder params
func (o *UpdateFolderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update folder params
func (o *UpdateFolderParams) WithContext(ctx context.Context) *UpdateFolderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update folder params
func (o *UpdateFolderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update folder params
func (o *UpdateFolderParams) WithHTTPClient(client *http.Client) *UpdateFolderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update folder params
func (o *UpdateFolderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFolderID adds the folderID to the update folder params
func (o *UpdateFolderParams) WithFolderID(folderID int64) *UpdateFolderParams {
	o.SetFolderID(folderID)
	return o
}

// SetFolderID adds the folderId to the update folder params
func (o *UpdateFolderParams) SetFolderID(folderID int64) {
	o.FolderID = folderID
}

// WithUpdateFolder adds the updateFolder to the update folder params
func (o *UpdateFolderParams) WithUpdateFolder(updateFolder *models.CreateUpdateFolder) *UpdateFolderParams {
	o.SetUpdateFolder(updateFolder)
	return o
}

// SetUpdateFolder adds the updateFolder to the update folder params
func (o *UpdateFolderParams) SetUpdateFolder(updateFolder *models.CreateUpdateFolder) {
	o.UpdateFolder = updateFolder
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateFolderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param folderId
	if err := r.SetPathParam("folderId", swag.FormatInt64(o.FolderID)); err != nil {
		return err
	}

	if o.UpdateFolder != nil {
		if err := r.SetBodyParam(o.UpdateFolder); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
