// Code generated by go-swagger; DO NOT EDIT.

package smtp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sendinblue/APIv3-go-library/models"
)

// NewSendTemplateParams creates a new SendTemplateParams object
// with the default values initialized.
func NewSendTemplateParams() *SendTemplateParams {
	var ()
	return &SendTemplateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSendTemplateParamsWithTimeout creates a new SendTemplateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendTemplateParamsWithTimeout(timeout time.Duration) *SendTemplateParams {
	var ()
	return &SendTemplateParams{

		timeout: timeout,
	}
}

// NewSendTemplateParamsWithContext creates a new SendTemplateParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendTemplateParamsWithContext(ctx context.Context) *SendTemplateParams {
	var ()
	return &SendTemplateParams{

		Context: ctx,
	}
}

// NewSendTemplateParamsWithHTTPClient creates a new SendTemplateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendTemplateParamsWithHTTPClient(client *http.Client) *SendTemplateParams {
	var ()
	return &SendTemplateParams{
		HTTPClient: client,
	}
}

/*SendTemplateParams contains all the parameters to send to the API endpoint
for the send template operation typically these are written to a http.Request
*/
type SendTemplateParams struct {

	/*SendEmail*/
	SendEmail *models.SendEmail
	/*TemplateID
	  Id of the template

	*/
	TemplateID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send template params
func (o *SendTemplateParams) WithTimeout(timeout time.Duration) *SendTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send template params
func (o *SendTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send template params
func (o *SendTemplateParams) WithContext(ctx context.Context) *SendTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send template params
func (o *SendTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send template params
func (o *SendTemplateParams) WithHTTPClient(client *http.Client) *SendTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send template params
func (o *SendTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSendEmail adds the sendEmail to the send template params
func (o *SendTemplateParams) WithSendEmail(sendEmail *models.SendEmail) *SendTemplateParams {
	o.SetSendEmail(sendEmail)
	return o
}

// SetSendEmail adds the sendEmail to the send template params
func (o *SendTemplateParams) SetSendEmail(sendEmail *models.SendEmail) {
	o.SendEmail = sendEmail
}

// WithTemplateID adds the templateID to the send template params
func (o *SendTemplateParams) WithTemplateID(templateID int64) *SendTemplateParams {
	o.SetTemplateID(templateID)
	return o
}

// SetTemplateID adds the templateId to the send template params
func (o *SendTemplateParams) SetTemplateID(templateID int64) {
	o.TemplateID = templateID
}

// WriteToRequest writes these params to a swagger request
func (o *SendTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SendEmail == nil {
		o.SendEmail = new(models.SendEmail)
	}

	if err := r.SetBodyParam(o.SendEmail); err != nil {
		return err
	}

	// path param templateId
	if err := r.SetPathParam("templateId", swag.FormatInt64(o.TemplateID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
