// Code generated by go-swagger; DO NOT EDIT.

package smtp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEmailEventReportParams creates a new GetEmailEventReportParams object
// with the default values initialized.
func NewGetEmailEventReportParams() *GetEmailEventReportParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetEmailEventReportParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEmailEventReportParamsWithTimeout creates a new GetEmailEventReportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEmailEventReportParamsWithTimeout(timeout time.Duration) *GetEmailEventReportParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetEmailEventReportParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: timeout,
	}
}

// NewGetEmailEventReportParamsWithContext creates a new GetEmailEventReportParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEmailEventReportParamsWithContext(ctx context.Context) *GetEmailEventReportParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetEmailEventReportParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		Context: ctx,
	}
}

// NewGetEmailEventReportParamsWithHTTPClient creates a new GetEmailEventReportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEmailEventReportParamsWithHTTPClient(client *http.Client) *GetEmailEventReportParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetEmailEventReportParams{
		Limit:      &limitDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetEmailEventReportParams contains all the parameters to send to the API endpoint
for the get email event report operation typically these are written to a http.Request
*/
type GetEmailEventReportParams struct {

	/*Days
	  Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'

	*/
	Days *int64
	/*Email
	  Filter the report for a specific email addresses

	*/
	Email *strfmt.Email
	/*EndDate
	  Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate

	*/
	EndDate *strfmt.Date
	/*Event
	  Filter the report for a specific event type

	*/
	Event *string
	/*Limit
	  Number limitation for the result returned

	*/
	Limit *int64
	/*MessageID
	  Filter on a specific message id

	*/
	MessageID *string
	/*Offset
	  Beginning point in the list to retrieve from.

	*/
	Offset *int64
	/*StartDate
	  Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate

	*/
	StartDate *strfmt.Date
	/*Tags
	  Filter the report for tags (serialized and urlencoded array)

	*/
	Tags *string
	/*TemplateID
	  Filter on a specific template id

	*/
	TemplateID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get email event report params
func (o *GetEmailEventReportParams) WithTimeout(timeout time.Duration) *GetEmailEventReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get email event report params
func (o *GetEmailEventReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get email event report params
func (o *GetEmailEventReportParams) WithContext(ctx context.Context) *GetEmailEventReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get email event report params
func (o *GetEmailEventReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get email event report params
func (o *GetEmailEventReportParams) WithHTTPClient(client *http.Client) *GetEmailEventReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get email event report params
func (o *GetEmailEventReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDays adds the days to the get email event report params
func (o *GetEmailEventReportParams) WithDays(days *int64) *GetEmailEventReportParams {
	o.SetDays(days)
	return o
}

// SetDays adds the days to the get email event report params
func (o *GetEmailEventReportParams) SetDays(days *int64) {
	o.Days = days
}

// WithEmail adds the email to the get email event report params
func (o *GetEmailEventReportParams) WithEmail(email *strfmt.Email) *GetEmailEventReportParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get email event report params
func (o *GetEmailEventReportParams) SetEmail(email *strfmt.Email) {
	o.Email = email
}

// WithEndDate adds the endDate to the get email event report params
func (o *GetEmailEventReportParams) WithEndDate(endDate *strfmt.Date) *GetEmailEventReportParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get email event report params
func (o *GetEmailEventReportParams) SetEndDate(endDate *strfmt.Date) {
	o.EndDate = endDate
}

// WithEvent adds the event to the get email event report params
func (o *GetEmailEventReportParams) WithEvent(event *string) *GetEmailEventReportParams {
	o.SetEvent(event)
	return o
}

// SetEvent adds the event to the get email event report params
func (o *GetEmailEventReportParams) SetEvent(event *string) {
	o.Event = event
}

// WithLimit adds the limit to the get email event report params
func (o *GetEmailEventReportParams) WithLimit(limit *int64) *GetEmailEventReportParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get email event report params
func (o *GetEmailEventReportParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMessageID adds the messageID to the get email event report params
func (o *GetEmailEventReportParams) WithMessageID(messageID *string) *GetEmailEventReportParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the get email event report params
func (o *GetEmailEventReportParams) SetMessageID(messageID *string) {
	o.MessageID = messageID
}

// WithOffset adds the offset to the get email event report params
func (o *GetEmailEventReportParams) WithOffset(offset *int64) *GetEmailEventReportParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get email event report params
func (o *GetEmailEventReportParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStartDate adds the startDate to the get email event report params
func (o *GetEmailEventReportParams) WithStartDate(startDate *strfmt.Date) *GetEmailEventReportParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get email event report params
func (o *GetEmailEventReportParams) SetStartDate(startDate *strfmt.Date) {
	o.StartDate = startDate
}

// WithTags adds the tags to the get email event report params
func (o *GetEmailEventReportParams) WithTags(tags *string) *GetEmailEventReportParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get email event report params
func (o *GetEmailEventReportParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTemplateID adds the templateID to the get email event report params
func (o *GetEmailEventReportParams) WithTemplateID(templateID *int64) *GetEmailEventReportParams {
	o.SetTemplateID(templateID)
	return o
}

// SetTemplateID adds the templateId to the get email event report params
func (o *GetEmailEventReportParams) SetTemplateID(templateID *int64) {
	o.TemplateID = templateID
}

// WriteToRequest writes these params to a swagger request
func (o *GetEmailEventReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Days != nil {

		// query param days
		var qrDays int64
		if o.Days != nil {
			qrDays = *o.Days
		}
		qDays := swag.FormatInt64(qrDays)
		if qDays != "" {
			if err := r.SetQueryParam("days", qDays); err != nil {
				return err
			}
		}

	}

	if o.Email != nil {

		// query param email
		var qrEmail strfmt.Email
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail.String()
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate strfmt.Date
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {
			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.Event != nil {

		// query param event
		var qrEvent string
		if o.Event != nil {
			qrEvent = *o.Event
		}
		qEvent := qrEvent
		if qEvent != "" {
			if err := r.SetQueryParam("event", qEvent); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MessageID != nil {

		// query param messageId
		var qrMessageID string
		if o.MessageID != nil {
			qrMessageID = *o.MessageID
		}
		qMessageID := qrMessageID
		if qMessageID != "" {
			if err := r.SetQueryParam("messageId", qMessageID); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate strfmt.Date
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.TemplateID != nil {

		// query param templateId
		var qrTemplateID int64
		if o.TemplateID != nil {
			qrTemplateID = *o.TemplateID
		}
		qTemplateID := swag.FormatInt64(qrTemplateID)
		if qTemplateID != "" {
			if err := r.SetQueryParam("templateId", qTemplateID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
