// Code generated by go-swagger; DO NOT EDIT.

package smtp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new smtp API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for smtp API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSMTPTemplate creates an smtp template
*/
func (a *Client) CreateSMTPTemplate(params *CreateSMTPTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSMTPTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSMTPTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSmtpTemplate",
		Method:             "POST",
		PathPattern:        "/smtp/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSMTPTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSMTPTemplateCreated), nil

}

/*
DeleteHardbounces deletes hardbounces

Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)
*/
func (a *Client) DeleteHardbounces(params *DeleteHardbouncesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHardbouncesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHardbouncesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHardbounces",
		Method:             "POST",
		PathPattern:        "/smtp/deleteHardbounces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHardbouncesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHardbouncesNoContent), nil

}

/*
GetAggregatedSMTPReport gets your SMTP activity aggregated over a period of time
*/
func (a *Client) GetAggregatedSMTPReport(params *GetAggregatedSMTPReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetAggregatedSMTPReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAggregatedSMTPReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAggregatedSmtpReport",
		Method:             "GET",
		PathPattern:        "/smtp/statistics/aggregatedReport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAggregatedSMTPReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAggregatedSMTPReportOK), nil

}

/*
GetEmailEventReport gets all your SMTP activity unaggregated events
*/
func (a *Client) GetEmailEventReport(params *GetEmailEventReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmailEventReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailEventReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailEventReport",
		Method:             "GET",
		PathPattern:        "/smtp/statistics/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEmailEventReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmailEventReportOK), nil

}

/*
GetSMTPReport gets your SMTP activity aggregated per day
*/
func (a *Client) GetSMTPReport(params *GetSMTPReportParams, authInfo runtime.ClientAuthInfoWriter) (*GetSMTPReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSMTPReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmtpReport",
		Method:             "GET",
		PathPattern:        "/smtp/statistics/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSMTPReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSMTPReportOK), nil

}

/*
GetSMTPTemplate returns the template informations
*/
func (a *Client) GetSMTPTemplate(params *GetSMTPTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetSMTPTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSMTPTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmtpTemplate",
		Method:             "GET",
		PathPattern:        "/smtp/templates/{templateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSMTPTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSMTPTemplateOK), nil

}

/*
GetSMTPTemplates gets the list of SMTP templates
*/
func (a *Client) GetSMTPTemplates(params *GetSMTPTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSMTPTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSMTPTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmtpTemplates",
		Method:             "GET",
		PathPattern:        "/smtp/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSMTPTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSMTPTemplatesOK), nil

}

/*
SendTemplate sends a template
*/
func (a *Client) SendTemplate(params *SendTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*SendTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTemplate",
		Method:             "POST",
		PathPattern:        "/smtp/templates/{templateId}/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendTemplateCreated), nil

}

/*
SendTestTemplate sends a template to your test list
*/
func (a *Client) SendTestTemplate(params *SendTestTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*SendTestTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTestTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTestTemplate",
		Method:             "POST",
		PathPattern:        "/smtp/templates/{templateId}/sendTest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendTestTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendTestTemplateNoContent), nil

}

/*
SendTransacEmail sends a transactional email
*/
func (a *Client) SendTransacEmail(params *SendTransacEmailParams, authInfo runtime.ClientAuthInfoWriter) (*SendTransacEmailCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTransacEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTransacEmail",
		Method:             "POST",
		PathPattern:        "/smtp/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendTransacEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendTransacEmailCreated), nil

}

/*
UpdateSMTPTemplate updates an smtp templates
*/
func (a *Client) UpdateSMTPTemplate(params *UpdateSMTPTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSMTPTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSMTPTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmtpTemplate",
		Method:             "PUT",
		PathPattern:        "/smtp/templates/{templateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSMTPTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSMTPTemplateNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
