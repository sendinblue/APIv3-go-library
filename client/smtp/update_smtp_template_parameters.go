// Code generated by go-swagger; DO NOT EDIT.

package smtp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sendinblue/APIv3-go-library/models"
)

// NewUpdateSMTPTemplateParams creates a new UpdateSMTPTemplateParams object
// with the default values initialized.
func NewUpdateSMTPTemplateParams() *UpdateSMTPTemplateParams {
	var ()
	return &UpdateSMTPTemplateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSMTPTemplateParamsWithTimeout creates a new UpdateSMTPTemplateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSMTPTemplateParamsWithTimeout(timeout time.Duration) *UpdateSMTPTemplateParams {
	var ()
	return &UpdateSMTPTemplateParams{

		timeout: timeout,
	}
}

// NewUpdateSMTPTemplateParamsWithContext creates a new UpdateSMTPTemplateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSMTPTemplateParamsWithContext(ctx context.Context) *UpdateSMTPTemplateParams {
	var ()
	return &UpdateSMTPTemplateParams{

		Context: ctx,
	}
}

// NewUpdateSMTPTemplateParamsWithHTTPClient creates a new UpdateSMTPTemplateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSMTPTemplateParamsWithHTTPClient(client *http.Client) *UpdateSMTPTemplateParams {
	var ()
	return &UpdateSMTPTemplateParams{
		HTTPClient: client,
	}
}

/*UpdateSMTPTemplateParams contains all the parameters to send to the API endpoint
for the update Smtp template operation typically these are written to a http.Request
*/
type UpdateSMTPTemplateParams struct {

	/*SMTPTemplate
	  values to update in smtp template

	*/
	SMTPTemplate *models.UpdateSMTPTemplate
	/*TemplateID
	  id of the template

	*/
	TemplateID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update Smtp template params
func (o *UpdateSMTPTemplateParams) WithTimeout(timeout time.Duration) *UpdateSMTPTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update Smtp template params
func (o *UpdateSMTPTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update Smtp template params
func (o *UpdateSMTPTemplateParams) WithContext(ctx context.Context) *UpdateSMTPTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update Smtp template params
func (o *UpdateSMTPTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update Smtp template params
func (o *UpdateSMTPTemplateParams) WithHTTPClient(client *http.Client) *UpdateSMTPTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update Smtp template params
func (o *UpdateSMTPTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSMTPTemplate adds the sMTPTemplate to the update Smtp template params
func (o *UpdateSMTPTemplateParams) WithSMTPTemplate(sMTPTemplate *models.UpdateSMTPTemplate) *UpdateSMTPTemplateParams {
	o.SetSMTPTemplate(sMTPTemplate)
	return o
}

// SetSMTPTemplate adds the smtpTemplate to the update Smtp template params
func (o *UpdateSMTPTemplateParams) SetSMTPTemplate(sMTPTemplate *models.UpdateSMTPTemplate) {
	o.SMTPTemplate = sMTPTemplate
}

// WithTemplateID adds the templateID to the update Smtp template params
func (o *UpdateSMTPTemplateParams) WithTemplateID(templateID int64) *UpdateSMTPTemplateParams {
	o.SetTemplateID(templateID)
	return o
}

// SetTemplateID adds the templateId to the update Smtp template params
func (o *UpdateSMTPTemplateParams) SetTemplateID(templateID int64) {
	o.TemplateID = templateID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSMTPTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SMTPTemplate != nil {
		if err := r.SetBodyParam(o.SMTPTemplate); err != nil {
			return err
		}
	}

	// path param templateId
	if err := r.SetPathParam("templateId", swag.FormatInt64(o.TemplateID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
