// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorModel error model
// swagger:model errorModel
type ErrorModel struct {

	// Error code displayed in case of a failure
	// Required: true
	Code *string `json:"code"`

	// Readable message associated to the failure
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this error model
func (m *ErrorModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var errorModelTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invalid_parameter","missing_parameter","out_of_range","campaign_processing","campaign_sent","document_not_found","reseller_permission","not_enough_credits","permission_denied","duplicate_parameter","duplicate_request","method_not_allowed","unauthorized","account_under_validation","not_acceptable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorModelTypeCodePropEnum = append(errorModelTypeCodePropEnum, v)
	}
}

const (
	// ErrorModelCodeInvalidParameter captures enum value "invalid_parameter"
	ErrorModelCodeInvalidParameter string = "invalid_parameter"
	// ErrorModelCodeMissingParameter captures enum value "missing_parameter"
	ErrorModelCodeMissingParameter string = "missing_parameter"
	// ErrorModelCodeOutOfRange captures enum value "out_of_range"
	ErrorModelCodeOutOfRange string = "out_of_range"
	// ErrorModelCodeCampaignProcessing captures enum value "campaign_processing"
	ErrorModelCodeCampaignProcessing string = "campaign_processing"
	// ErrorModelCodeCampaignSent captures enum value "campaign_sent"
	ErrorModelCodeCampaignSent string = "campaign_sent"
	// ErrorModelCodeDocumentNotFound captures enum value "document_not_found"
	ErrorModelCodeDocumentNotFound string = "document_not_found"
	// ErrorModelCodeResellerPermission captures enum value "reseller_permission"
	ErrorModelCodeResellerPermission string = "reseller_permission"
	// ErrorModelCodeNotEnoughCredits captures enum value "not_enough_credits"
	ErrorModelCodeNotEnoughCredits string = "not_enough_credits"
	// ErrorModelCodePermissionDenied captures enum value "permission_denied"
	ErrorModelCodePermissionDenied string = "permission_denied"
	// ErrorModelCodeDuplicateParameter captures enum value "duplicate_parameter"
	ErrorModelCodeDuplicateParameter string = "duplicate_parameter"
	// ErrorModelCodeDuplicateRequest captures enum value "duplicate_request"
	ErrorModelCodeDuplicateRequest string = "duplicate_request"
	// ErrorModelCodeMethodNotAllowed captures enum value "method_not_allowed"
	ErrorModelCodeMethodNotAllowed string = "method_not_allowed"
	// ErrorModelCodeUnauthorized captures enum value "unauthorized"
	ErrorModelCodeUnauthorized string = "unauthorized"
	// ErrorModelCodeAccountUnderValidation captures enum value "account_under_validation"
	ErrorModelCodeAccountUnderValidation string = "account_under_validation"
	// ErrorModelCodeNotAcceptable captures enum value "not_acceptable"
	ErrorModelCodeNotAcceptable string = "not_acceptable"
)

// prop value enum
func (m *ErrorModel) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, errorModelTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ErrorModel) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", *m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ErrorModel) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorModel) UnmarshalBinary(b []byte) error {
	var res ErrorModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
