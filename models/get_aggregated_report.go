// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAggregatedReport get aggregated report
// swagger:model getAggregatedReport

type GetAggregatedReport struct {

	// Number of blocked contact emails for the timeframe
	// Required: true
	Blocked *int64 `json:"blocked"`

	// Number of clicks for the timeframe
	// Required: true
	Clicks *int64 `json:"clicks"`

	// Number of delivered emails for the timeframe
	// Required: true
	Delivered *int64 `json:"delivered"`

	// Number of hardbounces for the timeframe
	// Required: true
	HardBounces *int64 `json:"hardBounces"`

	// Number of invalid emails for the timeframe
	// Required: true
	Invalid *int64 `json:"invalid"`

	// Number of openings for the timeframe
	// Required: true
	Opens *int64 `json:"opens"`

	// Time frame of the report
	// Required: true
	Range *string `json:"range"`

	// Number of requests for the timeframe
	// Required: true
	Requests *int64 `json:"requests"`

	// Number of softbounces for the timeframe
	// Required: true
	SoftBounces *int64 `json:"softBounces"`

	// Number of complaint (spam report) for the timeframe
	// Required: true
	SpamReports *int64 `json:"spamReports"`

	// Number of unique clicks for the timeframe
	// Required: true
	UniqueClicks *int64 `json:"uniqueClicks"`

	// Number of unique openings for the timeframe
	// Required: true
	UniqueOpens *int64 `json:"uniqueOpens"`
}

/* polymorph getAggregatedReport blocked false */

/* polymorph getAggregatedReport clicks false */

/* polymorph getAggregatedReport delivered false */

/* polymorph getAggregatedReport hardBounces false */

/* polymorph getAggregatedReport invalid false */

/* polymorph getAggregatedReport opens false */

/* polymorph getAggregatedReport range false */

/* polymorph getAggregatedReport requests false */

/* polymorph getAggregatedReport softBounces false */

/* polymorph getAggregatedReport spamReports false */

/* polymorph getAggregatedReport uniqueClicks false */

/* polymorph getAggregatedReport uniqueOpens false */

// Validate validates this get aggregated report
func (m *GetAggregatedReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlocked(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClicks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDelivered(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHardBounces(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvalid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOpens(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRequests(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSoftBounces(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSpamReports(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniqueClicks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniqueOpens(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAggregatedReport) validateBlocked(formats strfmt.Registry) error {

	if err := validate.Required("blocked", "body", m.Blocked); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateClicks(formats strfmt.Registry) error {

	if err := validate.Required("clicks", "body", m.Clicks); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateDelivered(formats strfmt.Registry) error {

	if err := validate.Required("delivered", "body", m.Delivered); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateHardBounces(formats strfmt.Registry) error {

	if err := validate.Required("hardBounces", "body", m.HardBounces); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateInvalid(formats strfmt.Registry) error {

	if err := validate.Required("invalid", "body", m.Invalid); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateOpens(formats strfmt.Registry) error {

	if err := validate.Required("opens", "body", m.Opens); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateRange(formats strfmt.Registry) error {

	if err := validate.Required("range", "body", m.Range); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateRequests(formats strfmt.Registry) error {

	if err := validate.Required("requests", "body", m.Requests); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateSoftBounces(formats strfmt.Registry) error {

	if err := validate.Required("softBounces", "body", m.SoftBounces); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateSpamReports(formats strfmt.Registry) error {

	if err := validate.Required("spamReports", "body", m.SpamReports); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateUniqueClicks(formats strfmt.Registry) error {

	if err := validate.Required("uniqueClicks", "body", m.UniqueClicks); err != nil {
		return err
	}

	return nil
}

func (m *GetAggregatedReport) validateUniqueOpens(formats strfmt.Registry) error {

	if err := validate.Required("uniqueOpens", "body", m.UniqueOpens); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAggregatedReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAggregatedReport) UnmarshalBinary(b []byte) error {
	var res GetAggregatedReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
