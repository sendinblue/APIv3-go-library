// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSMSCampaignOverview get Sms campaign overview
// swagger:model getSmsCampaignOverview
type GetSMSCampaignOverview struct {

	// Content of the SMS Campaign
	// Required: true
	Content *string `json:"content"`

	// Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
	// Required: true
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// ID of the SMS Campaign
	// Required: true
	ID *int64 `json:"id"`

	// UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
	// Required: true
	ModifiedAt *strfmt.DateTime `json:"modifiedAt"`

	// Name of the SMS Campaign
	// Required: true
	Name *string `json:"name"`

	// UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
	// Required: true
	ScheduledAt *strfmt.DateTime `json:"scheduledAt"`

	// Sender of the SMS Campaign
	// Required: true
	Sender *string `json:"sender"`

	// Status of the SMS Campaign
	// Required: true
	Status *string `json:"status"`

	// Retrieved the status of test SMS sending. (true=Test SMS has been sent  false=Test SMS has not been sent)
	// Required: true
	TestSent *bool `json:"testSent"`
}

// Validate validates this get Sms campaign overview
func (m *GetSMSCampaignOverview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScheduledAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTestSent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSMSCampaignOverview) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignOverview) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignOverview) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignOverview) validateModifiedAt(formats strfmt.Registry) error {

	if err := validate.Required("modifiedAt", "body", m.ModifiedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("modifiedAt", "body", "date-time", m.ModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignOverview) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignOverview) validateScheduledAt(formats strfmt.Registry) error {

	if err := validate.Required("scheduledAt", "body", m.ScheduledAt); err != nil {
		return err
	}

	if err := validate.FormatOf("scheduledAt", "body", "date-time", m.ScheduledAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignOverview) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	return nil
}

var getSmsCampaignOverviewTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["draft","sent","archive","queued","suspended","in_process"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getSmsCampaignOverviewTypeStatusPropEnum = append(getSmsCampaignOverviewTypeStatusPropEnum, v)
	}
}

const (
	// GetSMSCampaignOverviewStatusDraft captures enum value "draft"
	GetSMSCampaignOverviewStatusDraft string = "draft"
	// GetSMSCampaignOverviewStatusSent captures enum value "sent"
	GetSMSCampaignOverviewStatusSent string = "sent"
	// GetSMSCampaignOverviewStatusArchive captures enum value "archive"
	GetSMSCampaignOverviewStatusArchive string = "archive"
	// GetSMSCampaignOverviewStatusQueued captures enum value "queued"
	GetSMSCampaignOverviewStatusQueued string = "queued"
	// GetSMSCampaignOverviewStatusSuspended captures enum value "suspended"
	GetSMSCampaignOverviewStatusSuspended string = "suspended"
	// GetSMSCampaignOverviewStatusInProcess captures enum value "in_process"
	GetSMSCampaignOverviewStatusInProcess string = "in_process"
)

// prop value enum
func (m *GetSMSCampaignOverview) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getSmsCampaignOverviewTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetSMSCampaignOverview) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignOverview) validateTestSent(formats strfmt.Registry) error {

	if err := validate.Required("testSent", "body", m.TestSent); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSMSCampaignOverview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSMSCampaignOverview) UnmarshalBinary(b []byte) error {
	var res GetSMSCampaignOverview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
