// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCampaignOverview get campaign overview
// swagger:model getCampaignOverview
type GetCampaignOverview struct {

	// ID of the campaign
	// Required: true
	ID *int64 `json:"id"`

	// Name of the campaign
	// Required: true
	Name *string `json:"name"`

	// UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
	ScheduledAt strfmt.DateTime `json:"scheduledAt,omitempty"`

	// Status of the campaign
	// Required: true
	Status *string `json:"status"`

	// Subject of the campaign
	// Required: true
	Subject *string `json:"subject"`

	// Type of campaign
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get campaign overview
func (m *GetCampaignOverview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCampaignOverview) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignOverview) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var getCampaignOverviewTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["draft","sent","archive","queued","suspended","in_process"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCampaignOverviewTypeStatusPropEnum = append(getCampaignOverviewTypeStatusPropEnum, v)
	}
}

const (
	// GetCampaignOverviewStatusDraft captures enum value "draft"
	GetCampaignOverviewStatusDraft string = "draft"
	// GetCampaignOverviewStatusSent captures enum value "sent"
	GetCampaignOverviewStatusSent string = "sent"
	// GetCampaignOverviewStatusArchive captures enum value "archive"
	GetCampaignOverviewStatusArchive string = "archive"
	// GetCampaignOverviewStatusQueued captures enum value "queued"
	GetCampaignOverviewStatusQueued string = "queued"
	// GetCampaignOverviewStatusSuspended captures enum value "suspended"
	GetCampaignOverviewStatusSuspended string = "suspended"
	// GetCampaignOverviewStatusInProcess captures enum value "in_process"
	GetCampaignOverviewStatusInProcess string = "in_process"
)

// prop value enum
func (m *GetCampaignOverview) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCampaignOverviewTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCampaignOverview) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignOverview) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

var getCampaignOverviewTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["classic","trigger"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCampaignOverviewTypeTypePropEnum = append(getCampaignOverviewTypeTypePropEnum, v)
	}
}

const (
	// GetCampaignOverviewTypeClassic captures enum value "classic"
	GetCampaignOverviewTypeClassic string = "classic"
	// GetCampaignOverviewTypeTrigger captures enum value "trigger"
	GetCampaignOverviewTypeTrigger string = "trigger"
)

// prop value enum
func (m *GetCampaignOverview) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCampaignOverviewTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCampaignOverview) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCampaignOverview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCampaignOverview) UnmarshalBinary(b []byte) error {
	var res GetCampaignOverview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
