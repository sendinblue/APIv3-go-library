// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSenderIpsItems create sender ips items
// swagger:model createSenderIpsItems

type CreateSenderIpsItems struct {

	// Domain of the IP
	// Required: true
	Domain *string `json:"domain"`

	// Dedicated IP available in your account
	// Required: true
	IP *string `json:"ip"`

	// Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.
	// Maximum: 100
	// Minimum: 1
	Weight int64 `json:"weight,omitempty"`
}

/* polymorph createSenderIpsItems domain false */

/* polymorph createSenderIpsItems ip false */

/* polymorph createSenderIpsItems weight false */

// Validate validates this create sender ips items
func (m *CreateSenderIpsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSenderIpsItems) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *CreateSenderIpsItems) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *CreateSenderIpsItems) validateWeight(formats strfmt.Registry) error {

	if swag.IsZero(m.Weight) { // not required
		return nil
	}

	if err := validate.MinimumInt("weight", "body", int64(m.Weight), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("weight", "body", int64(m.Weight), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSenderIpsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSenderIpsItems) UnmarshalBinary(b []byte) error {
	var res CreateSenderIpsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
