// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAccountAllOf1 get account all of1
// swagger:model getAccountAllOf1
type GetAccountAllOf1 struct {

	// marketing automation
	MarketingAutomation *GetAccountAllOf1MarketingAutomation `json:"marketingAutomation,omitempty"`

	// plan
	// Required: true
	Plan GetAccountAllOf1Plan `json:"plan"`

	// relay
	// Required: true
	Relay *GetAccountAllOf1Relay `json:"relay"`
}

// Validate validates this get account all of1
func (m *GetAccountAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketingAutomation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelay(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAccountAllOf1) validateMarketingAutomation(formats strfmt.Registry) error {

	if swag.IsZero(m.MarketingAutomation) { // not required
		return nil
	}

	if m.MarketingAutomation != nil {

		if err := m.MarketingAutomation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketingAutomation")
			}
			return err
		}
	}

	return nil
}

func (m *GetAccountAllOf1) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("plan", "body", m.Plan); err != nil {
		return err
	}

	if err := m.Plan.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plan")
		}
		return err
	}

	return nil
}

func (m *GetAccountAllOf1) validateRelay(formats strfmt.Registry) error {

	if err := validate.Required("relay", "body", m.Relay); err != nil {
		return err
	}

	if m.Relay != nil {

		if err := m.Relay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relay")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAccountAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAccountAllOf1) UnmarshalBinary(b []byte) error {
	var res GetAccountAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
