// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWebhook create webhook
// swagger:model createWebhook
type CreateWebhook struct {

	// Description of the webhook
	Description string `json:"description,omitempty"`

	// Events triggering the webhook. Possible values for Transactional type webhook – request, delivered, hardBounce, softBounce, blocked, spam, invalid, deferred, click, opened, uniqueOpened and unsubscribed and possible values for Marketing type webhook – spam, opened, click, hardBounce, softBounce, unsubscribed, listAddition & delivered
	Events []string `json:"events"`

	// Type of the webhook
	Type *string `json:"type,omitempty"`

	// URL of the webhook
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this create webhook
func (m *CreateWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createWebhookEventsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hardBounce","softBounce","blocked","spam","delivered","request","click","invalid","deferred","opened","uniqueOpened","unsubscribed","listAddition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createWebhookEventsItemsEnum = append(createWebhookEventsItemsEnum, v)
	}
}

func (m *CreateWebhook) validateEventsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createWebhookEventsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateWebhook) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

		// value enum
		if err := m.validateEventsItemsEnum("events"+"."+strconv.Itoa(i), "body", m.Events[i]); err != nil {
			return err
		}

	}

	return nil
}

var createWebhookTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["transactional","marketing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createWebhookTypeTypePropEnum = append(createWebhookTypeTypePropEnum, v)
	}
}

const (
	// CreateWebhookTypeTransactional captures enum value "transactional"
	CreateWebhookTypeTransactional string = "transactional"
	// CreateWebhookTypeMarketing captures enum value "marketing"
	CreateWebhookTypeMarketing string = "marketing"
)

// prop value enum
func (m *CreateWebhook) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createWebhookTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateWebhook) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CreateWebhook) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateWebhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWebhook) UnmarshalBinary(b []byte) error {
	var res CreateWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
