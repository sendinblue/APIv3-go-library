// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateWebhook update webhook
// swagger:model updateWebhook

type UpdateWebhook struct {

	// Description of the webhook
	Description string `json:"description,omitempty"`

	// Events triggering the webhook. Possible values for Transactional type webhook – request, delivered, hardBounce, softBounce, blocked, spam, invalid, deferred, click, opened, uniqueOpened and unsubscribed and possible values for Marketing type webhook – spam, opened, click, hardBounce, softBounce, unsubscribed, listAddition and delivered
	Events []string `json:"events"`

	// URL of the webhook
	URL string `json:"url,omitempty"`
}

/* polymorph updateWebhook description false */

/* polymorph updateWebhook events false */

/* polymorph updateWebhook url false */

// Validate validates this update webhook
func (m *UpdateWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateWebhookEventsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hardBounce","softBounce","blocked","spam","delivered","request","click","invalid","deferred","opened","uniqueOpened","unsubscribed","listAddition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateWebhookEventsItemsEnum = append(updateWebhookEventsItemsEnum, v)
	}
}

func (m *UpdateWebhook) validateEventsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateWebhookEventsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateWebhook) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

		// value enum
		if err := m.validateEventsItemsEnum("events"+"."+strconv.Itoa(i), "body", m.Events[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateWebhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateWebhook) UnmarshalBinary(b []byte) error {
	var res UpdateWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
