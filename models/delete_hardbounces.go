// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteHardbounces delete hardbounces
// swagger:model deleteHardbounces
type DeleteHardbounces struct {

	// Target a specific email address
	ContactEmail strfmt.Email `json:"contactEmail,omitempty"`

	// Ending date (YYYY-MM-DD) of the period from which the hardbounces will be deleted. Must be greater than equal to startDate
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// Starting date (YYYY-MM-DD) of the period from which the hardbounces will be deleted. Must be lower than equal to endDate
	StartDate strfmt.Date `json:"startDate,omitempty"`
}

// Validate validates this delete hardbounces
func (m *DeleteHardbounces) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeleteHardbounces) validateContactEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactEmail) { // not required
		return nil
	}

	if err := validate.FormatOf("contactEmail", "body", "email", m.ContactEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeleteHardbounces) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeleteHardbounces) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeleteHardbounces) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeleteHardbounces) UnmarshalBinary(b []byte) error {
	var res DeleteHardbounces
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
