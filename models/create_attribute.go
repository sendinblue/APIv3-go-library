// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAttribute create attribute
// swagger:model createAttribute

type CreateAttribute struct {

	// Attribute categorisation.
	// Required: true
	Category *string `json:"category"`

	// enumemaration
	Enumemaration CreateAttributeEnumemaration `json:"enumemaration"`

	// Name of the attribute
	// Required: true
	Name *string `json:"name"`

	// Type of the attribute
	Type string `json:"type,omitempty"`

	// Value of the attribute
	// Required: true
	Value *string `json:"value"`
}

/* polymorph createAttribute category false */

/* polymorph createAttribute enumemaration false */

/* polymorph createAttribute name false */

/* polymorph createAttribute type false */

/* polymorph createAttribute value false */

// Validate validates this create attribute
func (m *CreateAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createAttributeTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["normal","transactional","category","calculated","global"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createAttributeTypeCategoryPropEnum = append(createAttributeTypeCategoryPropEnum, v)
	}
}

const (
	// CreateAttributeCategoryNormal captures enum value "normal"
	CreateAttributeCategoryNormal string = "normal"
	// CreateAttributeCategoryTransactional captures enum value "transactional"
	CreateAttributeCategoryTransactional string = "transactional"
	// CreateAttributeCategoryCategory captures enum value "category"
	CreateAttributeCategoryCategory string = "category"
	// CreateAttributeCategoryCalculated captures enum value "calculated"
	CreateAttributeCategoryCalculated string = "calculated"
	// CreateAttributeCategoryGlobal captures enum value "global"
	CreateAttributeCategoryGlobal string = "global"
)

// prop value enum
func (m *CreateAttribute) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createAttributeTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateAttribute) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttribute) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createAttributeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","date","float","id"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createAttributeTypeTypePropEnum = append(createAttributeTypeTypePropEnum, v)
	}
}

const (
	// CreateAttributeTypeText captures enum value "text"
	CreateAttributeTypeText string = "text"
	// CreateAttributeTypeDate captures enum value "date"
	CreateAttributeTypeDate string = "date"
	// CreateAttributeTypeFloat captures enum value "float"
	CreateAttributeTypeFloat string = "float"
	// CreateAttributeTypeID captures enum value "id"
	CreateAttributeTypeID string = "id"
)

// prop value enum
func (m *CreateAttribute) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createAttributeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateAttribute) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttribute) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAttribute) UnmarshalBinary(b []byte) error {
	var res CreateAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
