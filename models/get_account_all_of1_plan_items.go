// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAccountAllOf1PlanItems get account all of1 plan items
// swagger:model getAccountAllOf1PlanItems
type GetAccountAllOf1PlanItems struct {

	// Remaining credits of the user. This can either be "User Limit" or "Send Limit" depending on the plan.
	// Required: true
	Credits *float32 `json:"credits"`

	// This is the type of the credit, "User Limit" or "Send Limit" are two possible types of credit of a user. "User Limit" implies the total number of subscribers you can add to your account, and "Send Limit" implies the total number of emails you can send to the subscribers in your account.
	// Required: true
	CreditsType *string `json:"creditsType"`

	// Date of the period from which the plan will end (only available for "subscription", "unlimited" and "reseller" plan type)
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// Date of the period from which the plan will start (only available for "subscription", "unlimited" and "reseller" plan type)
	StartDate strfmt.Date `json:"startDate,omitempty"`

	// Displays the plan type of the user
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get account all of1 plan items
func (m *GetAccountAllOf1PlanItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreditsType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAccountAllOf1PlanItems) validateCredits(formats strfmt.Registry) error {

	if err := validate.Required("credits", "body", m.Credits); err != nil {
		return err
	}

	return nil
}

var getAccountAllOf1PlanItemsTypeCreditsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["userLimit","sendLimit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAccountAllOf1PlanItemsTypeCreditsTypePropEnum = append(getAccountAllOf1PlanItemsTypeCreditsTypePropEnum, v)
	}
}

const (
	// GetAccountAllOf1PlanItemsCreditsTypeUserLimit captures enum value "userLimit"
	GetAccountAllOf1PlanItemsCreditsTypeUserLimit string = "userLimit"
	// GetAccountAllOf1PlanItemsCreditsTypeSendLimit captures enum value "sendLimit"
	GetAccountAllOf1PlanItemsCreditsTypeSendLimit string = "sendLimit"
)

// prop value enum
func (m *GetAccountAllOf1PlanItems) validateCreditsTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getAccountAllOf1PlanItemsTypeCreditsTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetAccountAllOf1PlanItems) validateCreditsType(formats strfmt.Registry) error {

	if err := validate.Required("creditsType", "body", m.CreditsType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCreditsTypeEnum("creditsType", "body", *m.CreditsType); err != nil {
		return err
	}

	return nil
}

func (m *GetAccountAllOf1PlanItems) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetAccountAllOf1PlanItems) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var getAccountAllOf1PlanItemsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["payAsYouGo","unlimited","free","subscription","sms","reseller"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAccountAllOf1PlanItemsTypeTypePropEnum = append(getAccountAllOf1PlanItemsTypeTypePropEnum, v)
	}
}

const (
	// GetAccountAllOf1PlanItemsTypePayAsYouGo captures enum value "payAsYouGo"
	GetAccountAllOf1PlanItemsTypePayAsYouGo string = "payAsYouGo"
	// GetAccountAllOf1PlanItemsTypeUnlimited captures enum value "unlimited"
	GetAccountAllOf1PlanItemsTypeUnlimited string = "unlimited"
	// GetAccountAllOf1PlanItemsTypeFree captures enum value "free"
	GetAccountAllOf1PlanItemsTypeFree string = "free"
	// GetAccountAllOf1PlanItemsTypeSubscription captures enum value "subscription"
	GetAccountAllOf1PlanItemsTypeSubscription string = "subscription"
	// GetAccountAllOf1PlanItemsTypeSMS captures enum value "sms"
	GetAccountAllOf1PlanItemsTypeSMS string = "sms"
	// GetAccountAllOf1PlanItemsTypeReseller captures enum value "reseller"
	GetAccountAllOf1PlanItemsTypeReseller string = "reseller"
)

// prop value enum
func (m *GetAccountAllOf1PlanItems) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getAccountAllOf1PlanItemsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetAccountAllOf1PlanItems) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAccountAllOf1PlanItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAccountAllOf1PlanItems) UnmarshalBinary(b []byte) error {
	var res GetAccountAllOf1PlanItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
