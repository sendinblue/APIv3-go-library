// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetExtendedListAllOf1 get extended list all of1
// swagger:model getExtendedListAllOf1
type GetExtendedListAllOf1 struct {

	// campaign stats
	CampaignStats GetExtendedListAllOf1CampaignStats `json:"campaignStats"`

	// Creation Date of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
	// Required: true
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// Status telling if the list is dynamic or not (true=dynamic, false=not dynamic)
	DynamicList bool `json:"dynamicList,omitempty"`

	// ID of the folder
	// Required: true
	FolderID *int64 `json:"folderId"`
}

// Validate validates this get extended list all of1
func (m *GetExtendedListAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFolderID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedListAllOf1) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedListAllOf1) validateFolderID(formats strfmt.Registry) error {

	if err := validate.Required("folderId", "body", m.FolderID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedListAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedListAllOf1) UnmarshalBinary(b []byte) error {
	var res GetExtendedListAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
