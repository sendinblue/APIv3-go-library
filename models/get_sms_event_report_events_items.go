// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSMSEventReportEventsItems get Sms event report events items
// swagger:model getSmsEventReportEventsItems
type GetSMSEventReportEventsItems struct {

	// Date on which the event has been generated
	// Required: true
	Date *strfmt.Date `json:"date"`

	// Event which occurred
	// Required: true
	Event *string `json:"event"`

	// Message ID which generated the event
	// Required: true
	MessageID *string `json:"messageId"`

	// Phone number which has generated the event
	// Required: true
	PhoneNumber *string `json:"phoneNumber"`

	// Reason of bounce (only available if the event is hardbounce or softbounce)
	Reason string `json:"reason,omitempty"`

	// reply
	Reply string `json:"reply,omitempty"`

	// Tag of the SMS which generated the event
	Tag string `json:"tag,omitempty"`
}

// Validate validates this get Sms event report events items
func (m *GetSMSEventReportEventsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSMSEventReportEventsItems) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

var getSmsEventReportEventsItemsTypeEventPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bounces","hardBounces","softBounces","delivered","sent","accepted","unsubscription","replies","blocked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getSmsEventReportEventsItemsTypeEventPropEnum = append(getSmsEventReportEventsItemsTypeEventPropEnum, v)
	}
}

const (
	// GetSMSEventReportEventsItemsEventBounces captures enum value "bounces"
	GetSMSEventReportEventsItemsEventBounces string = "bounces"
	// GetSMSEventReportEventsItemsEventHardBounces captures enum value "hardBounces"
	GetSMSEventReportEventsItemsEventHardBounces string = "hardBounces"
	// GetSMSEventReportEventsItemsEventSoftBounces captures enum value "softBounces"
	GetSMSEventReportEventsItemsEventSoftBounces string = "softBounces"
	// GetSMSEventReportEventsItemsEventDelivered captures enum value "delivered"
	GetSMSEventReportEventsItemsEventDelivered string = "delivered"
	// GetSMSEventReportEventsItemsEventSent captures enum value "sent"
	GetSMSEventReportEventsItemsEventSent string = "sent"
	// GetSMSEventReportEventsItemsEventAccepted captures enum value "accepted"
	GetSMSEventReportEventsItemsEventAccepted string = "accepted"
	// GetSMSEventReportEventsItemsEventUnsubscription captures enum value "unsubscription"
	GetSMSEventReportEventsItemsEventUnsubscription string = "unsubscription"
	// GetSMSEventReportEventsItemsEventReplies captures enum value "replies"
	GetSMSEventReportEventsItemsEventReplies string = "replies"
	// GetSMSEventReportEventsItemsEventBlocked captures enum value "blocked"
	GetSMSEventReportEventsItemsEventBlocked string = "blocked"
)

// prop value enum
func (m *GetSMSEventReportEventsItems) validateEventEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getSmsEventReportEventsItemsTypeEventPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetSMSEventReportEventsItems) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event); err != nil {
		return err
	}

	// value enum
	if err := m.validateEventEnum("event", "body", *m.Event); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSEventReportEventsItems) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("messageId", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSEventReportEventsItems) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phoneNumber", "body", m.PhoneNumber); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSMSEventReportEventsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSMSEventReportEventsItems) UnmarshalBinary(b []byte) error {
	var res GetSMSEventReportEventsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
