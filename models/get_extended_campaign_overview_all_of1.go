// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetExtendedCampaignOverviewAllOf1 get extended campaign overview all of1
// swagger:model getExtendedCampaignOverviewAllOf1
type GetExtendedCampaignOverviewAllOf1 struct {

	// Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
	// Required: true
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// Footer of the campaign
	// Required: true
	Footer *string `json:"footer"`

	// Header of the campaign
	// Required: true
	Header *string `json:"header"`

	// HTML content of the campaign
	// Required: true
	HTMLContent *string `json:"htmlContent"`

	// Status of inline image. inlineImageActivation = false means image canâ€™t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
	InlineImageActivation bool `json:"inlineImageActivation,omitempty"`

	// Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
	MirrorActive bool `json:"mirrorActive,omitempty"`

	// UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
	// Required: true
	ModifiedAt *strfmt.DateTime `json:"modifiedAt"`

	// FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
	Recurring bool `json:"recurring,omitempty"`

	// Email defined as the "Reply to" of the campaign
	// Required: true
	ReplyTo *strfmt.Email `json:"replyTo"`

	// sender
	// Required: true
	Sender *GetExtendedCampaignOverviewAllOf1Sender `json:"sender"`

	// Link to share the campaign on social medias
	ShareLink string `json:"shareLink,omitempty"`

	// Tag of the campaign
	// Required: true
	Tag *string `json:"tag"`

	// Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
	// Required: true
	TestSent *bool `json:"testSent"`

	// Customisation of the "to" field of the campaign
	// Required: true
	ToField *string `json:"toField"`
}

// Validate validates this get extended campaign overview all of1
func (m *GetExtendedCampaignOverviewAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFooter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHeader(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTMLContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReplyTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTestSent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToField(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateFooter(formats strfmt.Registry) error {

	if err := validate.Required("footer", "body", m.Footer); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateHeader(formats strfmt.Registry) error {

	if err := validate.Required("header", "body", m.Header); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateHTMLContent(formats strfmt.Registry) error {

	if err := validate.Required("htmlContent", "body", m.HTMLContent); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateModifiedAt(formats strfmt.Registry) error {

	if err := validate.Required("modifiedAt", "body", m.ModifiedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("modifiedAt", "body", "date-time", m.ModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateReplyTo(formats strfmt.Registry) error {

	if err := validate.Required("replyTo", "body", m.ReplyTo); err != nil {
		return err
	}

	if err := validate.FormatOf("replyTo", "body", "email", m.ReplyTo.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	if m.Sender != nil {

		if err := m.Sender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateTestSent(formats strfmt.Registry) error {

	if err := validate.Required("testSent", "body", m.TestSent); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedCampaignOverviewAllOf1) validateToField(formats strfmt.Registry) error {

	if err := validate.Required("toField", "body", m.ToField); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedCampaignOverviewAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedCampaignOverviewAllOf1) UnmarshalBinary(b []byte) error {
	var res GetExtendedCampaignOverviewAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
