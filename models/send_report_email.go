// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendReportEmail send report email
// swagger:model sendReportEmail
type SendReportEmail struct {

	// Email addresses of the recipients in bcc
	Bcc []strfmt.Email `json:"bcc"`

	// Body of the email message
	Body string `json:"body,omitempty"`

	// Email addresses of the recipients in cc
	Cc []strfmt.Email `json:"cc"`

	// Type of the message body
	ContentType string `json:"contentType,omitempty"`

	// Subject of the email message
	Subject string `json:"subject,omitempty"`

	// Email addresses of the recipients
	To []strfmt.Email `json:"to"`
}

// Validate validates this send report email
func (m *SendReportEmail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBcc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendReportEmail) validateBcc(formats strfmt.Registry) error {

	if swag.IsZero(m.Bcc) { // not required
		return nil
	}

	return nil
}

func (m *SendReportEmail) validateCc(formats strfmt.Registry) error {

	if swag.IsZero(m.Cc) { // not required
		return nil
	}

	return nil
}

var sendReportEmailTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","html"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sendReportEmailTypeContentTypePropEnum = append(sendReportEmailTypeContentTypePropEnum, v)
	}
}

const (
	// SendReportEmailContentTypeText captures enum value "text"
	SendReportEmailContentTypeText string = "text"
	// SendReportEmailContentTypeHTML captures enum value "html"
	SendReportEmailContentTypeHTML string = "html"
)

// prop value enum
func (m *SendReportEmail) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sendReportEmailTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SendReportEmail) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *SendReportEmail) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendReportEmail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendReportEmail) UnmarshalBinary(b []byte) error {
	var res SendReportEmail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
