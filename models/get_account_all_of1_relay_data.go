// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAccountAllOf1RelayData Data regarding the SMTP account
// swagger:model getAccountAllOf1RelayData
type GetAccountAllOf1RelayData struct {

	// Port used for SMTP Relay
	// Required: true
	Port *int64 `json:"port"`

	// URL of the SMTP Relay
	// Required: true
	Relay *string `json:"relay"`

	// Email to use as login on SMTP
	// Required: true
	UserName *strfmt.Email `json:"userName"`
}

// Validate validates this get account all of1 relay data
func (m *GetAccountAllOf1RelayData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelay(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAccountAllOf1RelayData) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *GetAccountAllOf1RelayData) validateRelay(formats strfmt.Registry) error {

	if err := validate.Required("relay", "body", m.Relay); err != nil {
		return err
	}

	return nil
}

func (m *GetAccountAllOf1RelayData) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	if err := validate.FormatOf("userName", "body", "email", m.UserName.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAccountAllOf1RelayData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAccountAllOf1RelayData) UnmarshalBinary(b []byte) error {
	var res GetAccountAllOf1RelayData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
