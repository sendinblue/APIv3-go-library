// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSMSCampaignStats get Sms campaign stats
// swagger:model getSmsCampaignStats
type GetSMSCampaignStats struct {

	// Number of replies to the SMS
	// Required: true
	Answered *int64 `json:"answered"`

	// Number of delivered SMS
	// Required: true
	Delivered *int64 `json:"delivered"`

	// Number of hardbounced SMS
	// Required: true
	HardBounces *int64 `json:"hardBounces"`

	// Number of processing SMS
	// Required: true
	Processing *int64 `json:"processing"`

	// Number of sent SMS
	// Required: true
	Sent *int64 `json:"sent"`

	// Number of softbounced SMS
	// Required: true
	SoftBounces *int64 `json:"softBounces"`

	// Number of unsubscription SMS
	// Required: true
	Unsubscriptions *int64 `json:"unsubscriptions"`
}

// Validate validates this get Sms campaign stats
func (m *GetSMSCampaignStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnswered(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDelivered(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHardBounces(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessing(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSoftBounces(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnsubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSMSCampaignStats) validateAnswered(formats strfmt.Registry) error {

	if err := validate.Required("answered", "body", m.Answered); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignStats) validateDelivered(formats strfmt.Registry) error {

	if err := validate.Required("delivered", "body", m.Delivered); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignStats) validateHardBounces(formats strfmt.Registry) error {

	if err := validate.Required("hardBounces", "body", m.HardBounces); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignStats) validateProcessing(formats strfmt.Registry) error {

	if err := validate.Required("processing", "body", m.Processing); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignStats) validateSent(formats strfmt.Registry) error {

	if err := validate.Required("sent", "body", m.Sent); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignStats) validateSoftBounces(formats strfmt.Registry) error {

	if err := validate.Required("softBounces", "body", m.SoftBounces); err != nil {
		return err
	}

	return nil
}

func (m *GetSMSCampaignStats) validateUnsubscriptions(formats strfmt.Registry) error {

	if err := validate.Required("unsubscriptions", "body", m.Unsubscriptions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSMSCampaignStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSMSCampaignStats) UnmarshalBinary(b []byte) error {
	var res GetSMSCampaignStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
