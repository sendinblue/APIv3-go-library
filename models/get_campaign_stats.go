// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCampaignStats get campaign stats
// swagger:model getCampaignStats
type GetCampaignStats struct {

	// Number of clicks for the campaign
	// Required: true
	Clickers *int64 `json:"clickers"`

	// Number of complaints (Spam reports) for the campaign
	// Required: true
	Complaints *int64 `json:"complaints"`

	// Number of deferred emails for the campaign
	// Required: true
	Deferred *int64 `json:"deferred"`

	// Number of delivered emails for the campaign
	// Required: true
	Delivered *int64 `json:"delivered"`

	// Number of harbounce for the campaign
	// Required: true
	HardBounces *int64 `json:"hardBounces"`

	// List Id of email campaign (only in case of get email campaign(s))
	ListID int64 `json:"listId,omitempty"`

	// Number of sent emails for the campaign
	// Required: true
	Sent *int64 `json:"sent"`

	// Number of softbounce for the campaign
	// Required: true
	SoftBounces *int64 `json:"softBounces"`

	// Number of unique clicks for the campaign
	// Required: true
	UniqueClicks *int64 `json:"uniqueClicks"`

	// Number of unique openings for the campaign
	// Required: true
	UniqueViews *int64 `json:"uniqueViews"`

	// Number of unsubscription for the campaign
	// Required: true
	Unsubscriptions *int64 `json:"unsubscriptions"`

	// Number of openings for the campaign
	// Required: true
	Viewed *int64 `json:"viewed"`
}

// Validate validates this get campaign stats
func (m *GetCampaignStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClickers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateComplaints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeferred(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDelivered(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHardBounces(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSoftBounces(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniqueClicks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniqueViews(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnsubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateViewed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCampaignStats) validateClickers(formats strfmt.Registry) error {

	if err := validate.Required("clickers", "body", m.Clickers); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateComplaints(formats strfmt.Registry) error {

	if err := validate.Required("complaints", "body", m.Complaints); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateDeferred(formats strfmt.Registry) error {

	if err := validate.Required("deferred", "body", m.Deferred); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateDelivered(formats strfmt.Registry) error {

	if err := validate.Required("delivered", "body", m.Delivered); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateHardBounces(formats strfmt.Registry) error {

	if err := validate.Required("hardBounces", "body", m.HardBounces); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateSent(formats strfmt.Registry) error {

	if err := validate.Required("sent", "body", m.Sent); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateSoftBounces(formats strfmt.Registry) error {

	if err := validate.Required("softBounces", "body", m.SoftBounces); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateUniqueClicks(formats strfmt.Registry) error {

	if err := validate.Required("uniqueClicks", "body", m.UniqueClicks); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateUniqueViews(formats strfmt.Registry) error {

	if err := validate.Required("uniqueViews", "body", m.UniqueViews); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateUnsubscriptions(formats strfmt.Registry) error {

	if err := validate.Required("unsubscriptions", "body", m.Unsubscriptions); err != nil {
		return err
	}

	return nil
}

func (m *GetCampaignStats) validateViewed(formats strfmt.Registry) error {

	if err := validate.Required("viewed", "body", m.Viewed); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCampaignStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCampaignStats) UnmarshalBinary(b []byte) error {
	var res GetCampaignStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
